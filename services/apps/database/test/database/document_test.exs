defmodule Database.DocumentTest do
  use ExUnit.Case
  use Database.Case
  alias Database.{ Document, Fact, Id, Topic }

  defp setup_persistent_topic(_context) do
    topic = Topic.new("my label")
    Topic.persist(topic)
    [ topic: topic ]
  end

  describe "given a transient topic" do
    test "fetch/1 returns nil" do
      assert nil == Document.fetch(Id.new())
    end
  end

  describe "The document generated by fetch/1 on a topic with no facts" do
    setup :setup_persistent_topic

    test "it contains the topic", %{
      topic: topic
    } do
      assert topic == Document.fetch(topic.id).topic
    end

    test "it contains no facts", %{
      topic: topic
    } do
      assert MapSet.new([]) == Document.fetch(topic.id).facts
    end
  end

  describe "The documents generated by fetch/1 on topics related by a fact" do
    setup do
      [ topic: topic_a ] = setup_persistent_topic(nil)
      [ topic: topic_b ] = setup_persistent_topic(nil)

      fact = Fact.new([ topic_a.id, topic_b.id ], "fact content")
      :ok = Fact.persist(fact)

      [ topic_a: topic_a, topic_b: topic_b, fact: fact ]
    end

    test "The document generated by topic A contains the fact", %{
      topic_a: topic_a,
      topic_b: topic_b,
      fact: fact
    } do
      assert Document.fetch(topic_a.id).facts == MapSet.new([
        %Fact{
          id: fact.id,
          content: fact.content,
          topics: MapSet.new([ topic_a, topic_b ])
        }
      ])
    end

    test "The document generated by topic B contains the fact", %{
      topic_a: topic_a,
      topic_b: topic_b,
      fact: fact
    } do
      assert Document.fetch(topic_b.id).facts == MapSet.new([
        %Fact{
          id: fact.id,
          content: fact.content,
          topics: MapSet.new([ topic_a, topic_b ])
        }
      ])
    end
  end

  describe "The document generated by fetch/1 on a topic related to itself" do
    setup :setup_persistent_topic
    setup %{ topic: topic } do
      fact = Fact.new([ topic.id ], "fact content")
      :ok = Fact.persist(fact)

      [ fact: fact ]
    end

    test "The document contains that fact", %{
      topic: topic,
      fact: fact
    } do
      assert Document.fetch(topic.id).facts == MapSet.new([
        %Fact{
          id:      fact.id,
          content: fact.content,
          topics:  MapSet.new([ topic ])
        }
      ])
    end
  end

end
